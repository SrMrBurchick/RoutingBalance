/**
 * @author      : sbura (sbura@$HOSTNAME)
 * @file        : ecpg_sql
 * @created     : Monday Aug 15, 2022 14:01:27 EEST
 */

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "ecpg_sql.h"

#define SUCCES 0
#define FAIL   -1

static void die(void)
{
    /* avoid recursion on error */
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    fprintf(
        stderr,
        "database error %s:\n%s\n",
        sqlca.sqlstate,
        sqlca.sqlerrm.sqlerrmc
    );

    EXEC SQL ROLLBACK;
    EXEC SQL DISCONNECT;

    exit(1);

    /* restore the original handler */
    EXEC SQL WHENEVER SQLERROR CALL die();
}

int connect_to_database(const char* path, const char* user,
    const char* password)
{
    EXEC SQL BEGIN DECLARE SECTION;
    char v_target[128] = {0};
    char v_user[16] = {0};
    char v_passwd[16] = {0};
    EXEC SQL END DECLARE SECTION;

    strcpy(v_target, path);
    strcpy(v_user, user);
    strcpy(v_passwd, password);

    fprintf(stdout, "Connecting to: %s %s:%s\n", v_target, v_user, v_passwd);

    EXEC SQL CONNECT TO :v_target USER :v_user USING :v_passwd;

    return 0;
}

long select_from_account(long account_number)
{
    EXEC SQL BEGIN DECLARE SECTION;
    long v_acc_num;
    long r_acc_num = 0;
    EXEC SQL END DECLARE SECTION;

    v_acc_num = account_number;

    EXEC SQL DECLARE is_account CURSOR FOR
        SELECT account_number FROM account
        WHERE account.account_number = :v_acc_num;

    fprintf(stdout, "Selecting: %d\n", v_acc_num);
    EXEC SQL OPEN is_account;
    EXEC SQL FETCH FROM is_account INTO :r_acc_num;
    EXEC SQL CLOSE is_account;

    EXEC SQL COMMIT;

    fprintf(stdout, "Recived: %d\n", r_acc_num);

    return r_acc_num == account_number ? SUCCES : FAIL;
}

int select_from_balance(long account_number, const char* idate,
    float* out_balance)
{
    EXEC SQL BEGIN DECLARE SECTION;
    long v_acc_num;
    double v_balance = 0.0;
    char v_date[12] = {0};
    EXEC SQL END DECLARE SECTION;

    v_acc_num = account_number;
    strcpy(v_date, idate);

    fprintf(stdout, "Find balance for: %d, when %s\n", v_acc_num, v_date);
    EXEC SQL DECLARE get_balance CURSOR FOR
        SELECT balance FROM balance
        WHERE balance.account_number = :v_acc_num
        AND balance.date = :v_date;

    EXEC SQL OPEN get_balance;
    EXEC SQL FETCH FROM get_balance INTO :v_balance;
    EXEC SQL CLOSE get_balance;

    EXEC SQL COMMIT;

    *out_balance = v_balance;

    fprintf(stdout, "Find balance: %f\n", v_balance);

    return v_balance != 0 ? SUCCES : FAIL;
}

void disconnect_from_database()
{
    EXEC SQL DISCONNECT;
}
